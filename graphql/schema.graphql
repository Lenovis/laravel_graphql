type User {
    id: ID!
    name: String!
    email: String!
    businesses: [Business!]! @hasMany
}

type Business {
    id: ID!
    name: String!
    description: String!
    address: String!
    location: String!
    phone: String!
    work_m_f: String!
    work_sat: String!
    work_sun: String!
    currency: String!
    show_tips: Boolean!
    logo_url: String!
    price_percent: Int!
    owner: User! @belongsTo(relation: "user")
    services: [Service!]! @hasMany
}

type Service {
    id: ID!
    business: Business! @belongsTo(relation: "business")
    logo_url_0: String!
    logo_url_1: String!
    logo_url_2: String!
    name: String!
    price: Int!
    duration: String!
    description: String!
    address: String!
    location: String!
    phone: String!
    work_hours: String!
    break_hours: String!
    visible: Boolean!
}

type Query {
    user(id: ID! @eq): User @find
    users: [User!]! @paginate

    # business(id: ID! @eq): Business @find
    # businesses: [Business!]! @paginate
    service(id: ID! @eq): Service @find
    services: [Service!]! @paginate
    me: User @auth(guard: "api")
}

type Mutation {
    createUser(
        name: String!
        email: String! @rules(apply: ["email", "unique:users"])
        password: String! @bcrypt @rules(apply: ["min:6"])
    ): User @create

    createBusiness(
        name: String!
        description: String!
        address: String!
        phone: String!
        work_m_f: String!
        work_sat: String!
        work_sun: String!
        currency: String!
        show_tips: Boolean!
        logo_url: String
        price_percent: String
        location: String
    ): Business @field(resolver: "BusinessMutator@create") @middleware(checks: ["auth:api"])

    createService(
        name: String!
        business_id: Int!
        logo_url_0: String
        logo_url_1: String
        logo_url_2: String
        price: Int!
        duration: Int!
        description: String!
        address: String!
        location: String
        phone: String!
        work_hours: String!
        break_hours: String!
        visible: Boolean!
    ): Service @create @middleware(checks: ["auth:api"])

    login(
        email: String! 
        password: String!
    ): String @field(resolver: "AuthMutator@resolver")

    # createArticle(
    #     title: String! 
    #     content: String!
    # ): Article @field(resolver: "ArticleMutator@create") @middleware(checks: ["auth:api"])
}