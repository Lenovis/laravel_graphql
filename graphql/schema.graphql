"A datetime String with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date String with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type User {
    id: ID!
    name: String!
    email: String!
    businesses: [Business] @hasMany(type: "paginator" defaultCount: 10)
    messages: [Message] @hasMany(type: "paginator" defaultCount: 10)
    events: [Event] @hasMany(type: "paginator" defaultCount: 10)
    notifications: [User_notification] @hasMany(type: "paginator" defaultCount: 20)
    photos: [User_photo] @hasMany(type: "paginator" defaultCount: 5)
    admin_of_businesses: [Admin_of_business] @hasMany(type: "paginator" defaultCount:10)
}

type Business {
    id: ID!
    name: String!
    description: String!
    address: String!
    location: String!
    phone: String!
    work_m_f: String!
    work_sat: String!
    work_sun: String!
    currency: String!
    show_tips: Boolean!
    # logo_url: String!
    price_percent: Int!
    owner: User! @belongsTo(relation: "user")
    services: [Service] @hasMany(type: "paginator" defaultCount: 10)
    messages: [Message] @hasMany(type: "paginator" defaultCount: 10)
    notifications: [Business_notification] @hasMany(type: "paginator" defaultCount: 20)
    photos: [Business_photo] @hasMany(type: "paginator" defaultCount: 5)
    admins_of_business: [Admin_of_business] @hasMany(type: "paginator" defaultCount:10)
}

type Service {
    id: ID!
    business: Business! @belongsTo
    events: [Event] @hasMany(type: "paginator" defaultCount: 10)
    # logo_url_0: String!
    # logo_url_1: String!
    # logo_url_2: String!
    name: String!
    price: Int!
    duration: String!
    description: String!
    address: String!
    location: String!
    phone: String!
    work_hours: String!
    break_hours: String!
    visible: Boolean!
    photos: [Service_photo] @hasMany(type: "paginator" defaultCount: 5)
}

type Event {
    id: ID!
    user: User! @belongsTo
    service: Service! @belongsTo
    date: Date!
    time: String!
    duration: Int!
    real_price: Int!
    vip_price: Int
    tips: Int
    status: String!
}

type Message {
    id: ID!
    user: User! @belongsTo
    business: Business! @belongsTo
    sender: String!
    content: String!
    created_at: DateTime!
}

type User_notification {
    id: ID!
    user: User! @belongsTo
    business: Business! @belongsTo
    content: String
}

type Business_notification {
    id: ID!
    user: User! @belongsTo
    business: Business! @belongsTo
    content: String
}

type User_photo {
    id: ID!
    user: User! @belongsTo
    photo_url: String!
}

type Business_photo {
    id: ID!
    business: Business! @belongsTo
    photo_url: String!
}

type Service_photo {
    id: ID!
    service: Service! @belongsTo
    photo_url: String!
}

type Admin_of_business {
    id: ID!
    user: User! @belongsTo
    business: Business! @belongsTo
    status: String!
}

type Query {
    # user/s fields parsing only for developing
    user(id: ID! @eq): User @find
    users: [User!]! @paginate(defaultCount: 10)

    my_businesses(user_id: ID! @eq): Business @paginate(defaultCount: 10) @middleware(checks: ["auth:api"])

    service_by_id(id: ID! @eq): Service @find
    # dont forget to use % while inputing text
    service_by_name(name: String! @where(operator: "like")): Service @paginate(defaultCount: 10)
    services: [Service!]! @paginate(defaultCount: 10)

    event(id: ID! @eq): Event @find @middleware(checks: ["auth:api"])

    me: User @auth(guard: "api")
}

# type Subscription {
#     userNotificationAppeared(author: ID): User_notification
# }

type Mutation {
    createUser(
        name: String!
        email: String! @rules(apply: ["email", "unique:users"])
        password: String! @bcrypt @rules(apply: ["min:6"])
    ): User @create

    createBusiness(
        input: CreateBusinessInput! @spread
    ): Business @field(resolver: "BusinessMutator@create") @middleware(checks: ["auth:api"])

    createEvent(
        input: CreateEventInput! @spread
    ): Event @create @middleware(checks: ["auth:api"])

    createService(
        input: CreateServiceInput! @spread
    ): Service @create @middleware(checks: ["auth:api"])

    createMessage(
        input: CreateMessageInput! @spread
    ): Message @create @middleware(checks: ["auth:api"])

    login(
        email: String! 
        password: String!
    ): String @field(resolver: "AuthMutator@resolver")

    createUserNotification(
        input: CreateUserNotificationInput! @spread
    ): User_notification @create @middleware(checks: ["auth:api"])

    createBusinessNotification(
        input: CreateBusinessNotificationInput! @spread
    ): Business_notification @create @middleware(checks: ["auth:api"])

    createUserPhoto(
        input: CreateUserPhotoInput! @spread
    ): User_photo @create @middleware(checks: ["auth:api"])

    createBusinessPhoto(
        input: CreateBusinessPhotoInput! @spread
    ): Business_photo @create @middleware(checks: ["auth:api"])

    createServicePhoto(
        input: CreateServicePhotoInput! @spread
    ): Service_photo @create @middleware(checks: ["auth:api"])

    createAdminOfBusiness(
        input: CreateAdminOfBusinessInput! @spread
    ): Admin_of_business @create @middleware(checks: ["auth:api"])
}

input CreateAdminOfBusinessInput {
    user: UserBelongsTo!
    business: BusinessBelongsTo!
    status: String!
}

input CreateUserPhotoInput {
    user: UserBelongsTo!
    photo_url: String!
}

input CreateBusinessPhotoInput {
    business: BusinessBelongsTo!
    photo_url: String!
}

input CreateServicePhotoInput {
    service: ServiceBelongsTo!
    photo_url: String!
}

input CreateBusinessNotificationInput {
    user: UserBelongsTo!
    business: BusinessBelongsTo!
    content: String!
}

input CreateUserNotificationInput {
    user: UserBelongsTo!
    business: BusinessBelongsTo!
    content: String!
}

input CreateMessageInput {
    user: UserBelongsTo!
    business: BusinessBelongsTo!
    sender: String!
    content: String!
}

input CreateBusinessInput {
    name: String!
    description: String!
    address: String!
    phone: String!
    work_m_f: String!
    work_sat: String = ""
    work_sun: String = ""
    currency: String = "EUR"
    show_tips: Boolean = true
    price_percent: String
    location: String
}

input CreateEventInput {
    user: UserBelongsTo!
    service: ServiceBelongsTo!
    date: Date!
    time: String!
    duration: Int = 30
    real_price: Int!
    vip_price: Int
    tips: Int = 0
    status: String = "waiting"
}

input CreateServiceInput {
    name: String!
    price: Int!
    duration: Int!
    description: String!
    address: String!
    location: String
    phone: String!
    work_hours: String!
    break_hours: String!
    visible: Boolean!
    business: BusinessBelongsTo!
}

input BusinessBelongsTo {
    connect: ID
}

input ServiceBelongsTo {
    connect: ID
}

input UserBelongsTo {
    connect: ID
}